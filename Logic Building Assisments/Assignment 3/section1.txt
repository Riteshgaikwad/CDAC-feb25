
Snippet 1:
public class InfiniteForLoop {
public static void main(String[] args) {
for (int i = 0; i < 10; i--) {
System.out.println(i);
}
}
}
// Error to investigate: Why does this loop run infinitely? How should the loop control variable be adjusted?
---> Here instead of increment the i variable is decreased so the loop runs infinite times . 
---> Solution:- instead of decrement we should increase i.e. i++ =->for (int i = 0; i < 10; i++)



Snippet 2:
public class IncorrectWhileCondition {
public static void main(String[] args) {
int count = 5;
while (count = 0) {
System.out.println(count);
count--;
}
}
}
// Error to investigate: Why does the loop not execute as expected? What is the issue with the condition in the
`while` loop?
---> issue with the while loop condition  code lies in the use of the assignment operator (=) instead of the equality comparison operator (==).


Snippet 3:
public class DoWhileIncorrectCondition {
public static void main(String[] args) {
int num = 0;
do {
System.out.println(num);
num++;
} while (num > 0);
}
}
// Error to investigate: Why does the loop only execute once? What is wrong with the loop condition in the `dowhile`
loop?
---> do while loop runs at least once and here the condition is given wrong the num get increment and it becomes 1 and the condition becomes false so it runs once
---> so we need to change the condition such as while (num<5);


Snippet 4:
public class OffByOneErrorForLoop {
public static void main(String[] args) {
for (int i = 1; i <= 10; i++) {
System.out.println(i);
}
// Expected: 10 iterations with numbers 1 to 10
// Actual: Prints numbers 1 to 10, but the task expected only 1 to 9
}
}
// Error to investigate: What is the issue with the loop boundaries? How should the loop be adjusted to meet the
expected output?
--->here the coonditon given is i<=10 which includes the 10 as well so it print 1 to 10 . to have a desired output we have to write i<10; this will print 1 to 9 as expected.


Snippet 5:
public class WrongInitializationForLoop {
public static void main(String[] args) {
for (int i = 10; i >= 0; i++) {
System.out.println(i);
}
}
}
// Error to investigate: Why does this loop not print numbers in the expected order? What is the problem with the
initialization and update statements in the `for` loop?
---> this is not printing the expected output because the condition is incrementing the value of i instead of decrement . to solve this problem we need to have a condition as i--; we will get desired output. 



Snippet 6:
public class MisplacedForLoopBody {
public static void main(String[] args) {
for (int i = 0; i < 5; i++)
System.out.println(i);
System.out.println("Done");
}
}
// Error to investigate: Why does "Done" print only once, outside the loop? How should the loop body be enclosed to
include all statements within the loop?
--->for loops without braces { } only include the next single statement in the loop body.
so,the second line comes out of the loop so it runs ones.
---> for (int i = 0; i < 5; i++) {
            System.out.println(i);
            System.out.println("Done"); // Now inside the loop
        }



Snippet 7:
public class UninitializedWhileLoop {
public static void main(String[] args) {
int count;
while (count < 10) {
System.out.println(count);
count++;
}
}
}
// Error to investigate: Why does this code produce a compilation error? What needs to be done to initialize the loop
variable properly?
--->here the count variable is not initialized before use so we will get an error.So, we have to initialize the count=0; this will solve the error.



Snippet 8:
public class OffByOneDoWhileLoop {
public static void main(String[] args) {
int num = 1;
do {
System.out.println(num);
num--;
} while (num > 0);
}
}
// Error to investigate: Why does this loop print unexpected numbers? What adjustments are needed to print the
numbers from 1 to 5?
--->it is printing unexpected numbers because instead of increment we have decrement the variable num . so, to get desired output we will write num++;




Snippet 9:
public class InfiniteForLoopUpdate {
public static void main(String[] args) {
for (int i = 0; i < 5; i += 2) {
System.out.println(i);
}
}
}
// Error to investigate: Why does the loop print unexpected results or run infinitely? How should the loop update
expression be corrected?
--->this is expected to print the number from 0 to 4 but the condition given is wrong . it should be i++;



Snippet 10:
public class IncorrectWhileLoopControl {
public static void main(String[] args) {
int num = 10;
while (num = 10) {
System.out.println(num);
num--;
}
}
}
// Error to investigate: Why does the loop execute indefinitely? What is wrong with the loop condition?
--->Using = instead of == is a  mistake in conditional statements.




Snippet 11:
public class IncorrectLoopUpdate {
public static void main(String[] args) {
int i = 0;
while (i < 5) {
System.out.println(i);
i += 2; // Error: This may cause unexpected results in output
}
}
}
// Error to investigate: What will be the output of this loop? How should the loop variable be updated to achieve the
desired result?
---> the desired output is to print all numbers from 0 to 4 ( 0, 1, 2, 3, 4), the issue is with the increment step. Incrementing by 2 skips some numbers.
---> This should be declared as i++;




Snippet 12:
public class LoopVariableScope {
public static void main(String[] args) {
for (int i = 0; i < 5; i++) {
int x = i * 2;
}
System.out.println(x); // Error: 'x' is not accessible here
}
}
// Error to investigate: Why does the variable 'x' cause a compilation error? How does scope
---> a variable declared inside a block { } is only accessible within that block.
--->The compilation error occurs because the variable x is declared inside the for loop.



